-- Create alertas table
CREATE TABLE IF NOT EXISTS gbp_alertas (
  reminders_uid BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  uid UUID NOT NULL DEFAULT gen_random_uuid(),
  atendimento_uid UUID NOT NULL,
  empresa_uid UUID NOT NULL,
  title TEXT NOT NULL,
  description TEXT NULL,
  due_date TIMESTAMP WITH TIME ZONE NOT NULL,
  priority TEXT NOT NULL DEFAULT 'medium',
  status TEXT NOT NULL DEFAULT 'pending',
  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),
  created_by UUID NULL,
  updated_by UUID NULL,
  CONSTRAINT gbp_reminders_pkey PRIMARY KEY (uid),
  CONSTRAINT gbp_alertas_empresa_uid_fkey FOREIGN KEY (empresa_uid) REFERENCES gbp_empresas(uid),
  CONSTRAINT gbp_reminders_priority_check CHECK (priority = ANY (ARRAY['low', 'medium', 'high'])),
  CONSTRAINT gbp_reminders_status_check CHECK (status = ANY (ARRAY['pending', 'completed', 'cancelled']))
);

-- Create indexes
CREATE INDEX IF NOT EXISTS idx_gbp_reminders_empresa_id ON gbp_alertas USING btree (empresa_uid);
CREATE INDEX IF NOT EXISTS idx_gbp_reminders_due_date ON gbp_alertas USING btree (due_date);
CREATE INDEX IF NOT EXISTS idx_gbp_reminders_atendimento_id ON gbp_alertas USING btree (atendimento_uid);

-- Create lembretes table
CREATE TABLE IF NOT EXISTS gbp_lembretes (
  uid UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
  title VARCHAR(255) NOT NULL,
  description TEXT,
  due_date TIMESTAMP WITH TIME ZONE NOT NULL,
  priority VARCHAR(10) NOT NULL DEFAULT 'medium',
  status VARCHAR(20) NOT NULL DEFAULT 'pending',
  empresa_uid UUID NOT NULL,
  atendimento_uid UUID NOT NULL,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  CONSTRAINT gbp_lembretes_empresa_uid_fkey FOREIGN KEY (empresa_uid) REFERENCES gbp_empresas(uid),
  CONSTRAINT gbp_lembretes_atendimento_uid_fkey FOREIGN KEY (atendimento_uid) REFERENCES gbp_atendimentos(uid),
  CONSTRAINT gbp_lembretes_priority_check CHECK (priority IN ('low', 'medium', 'high')),
  CONSTRAINT gbp_lembretes_status_check CHECK (status IN ('pending', 'completed', 'cancelled'))
);

-- Create index for empresa_uid
CREATE INDEX IF NOT EXISTS idx_gbp_lembretes_empresa_uid ON gbp_lembretes USING btree (empresa_uid);

-- Create index for atendimento_uid
CREATE INDEX IF NOT EXISTS idx_gbp_lembretes_atendimento_uid ON gbp_lembretes USING btree (atendimento_uid);

-- Create index for due_date
CREATE INDEX IF NOT EXISTS idx_gbp_lembretes_due_date ON gbp_lembretes USING btree (due_date);

-- Create function to update updated_at
CREATE OR REPLACE FUNCTION update_lembretes_updated_at()
RETURNS TRIGGER AS $$
BEGIN
  NEW.updated_at = CURRENT_TIMESTAMP;
  RETURN NEW;
END;
$$ language 'plpgsql';

-- Create trigger to update updated_at
CREATE TRIGGER update_lembretes_updated_at
  BEFORE UPDATE ON gbp_lembretes
  FOR EACH ROW
  EXECUTE FUNCTION update_lembretes_updated_at(); 